#!/bin/bash

set -m

# OS Check. Put here because here is where we download the precompiled
# bundles that are arch specific.
UNAME=$(uname)
if [ "$UNAME" != "Linux" -a "$UNAME" != "Darwin" ] ; then
    echo "Sorry, this OS is not supported."
    exit 1
fi

# START get true PWD
# (http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in/179231)
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
pushd . > /dev/null
# END get true PWD

# cd to the package dir
cd "$DIR/.."

script_name=$(basename $0)
test_name=${script_name##unittest-}

default_unified_langs_dir=".meteor/local/tap-i18n"
fallback_lang="en"

# meteor_unittests_start(test_name, description)
meteor_unittests_start () {
    echo ""
    echo "### Running Meteor Unittests for test environment: $1"
    echo "### Test Description: $2"
    echo "###"
    echo "### Break (ctrl+c) after Meteor init to finish and move to the next test"

    clean
}

meteor_unittests_end () {
    :
}

bash_unittests_start () {
    echo ""
    echo "### Running Bash Unittests for Test: $1"
}

bash_unittests_end () {
    local failed_tests=$((total_tests - passed_tests))

    echo "### Bash unitests done. Results:"

    if (( $failed_tests == 0 )); then
        echo "✔✔✔ all ${total_tests} tests passed"
    else
        echo "✖✖✖ ${failed_tests} out of ${total_tests} some failed"
    fi
}

# install_test_packages(test-pack-name1, test-pack-name2, ...)
install_test_packages () {
    local test_name

    for test_name in "$@"; do
        cp -LR "unittest/utils/test-packages/test-pack-${test_name}" packages
        mv "packages/test-pack-${test_name}/package-tap.i18n." "packages/test-pack-${test_name}/package-tap.i18n"
    done
}

remove_package_js_test_section () {
    if [[ "$UNAME" == "Darwin" ]]; then
        sed -i '' '/Package.on_test/,/});/d' package.js
    elif [[ "$UNAME" == "Linux" ]]; then
        sed -i '/Package.on_test/,/});/d' package.js
    fi
}

total_tests=0
passed_tests=0
# record_test_result(result, test_description)
record_test_result () {
    result="$1"
    test_description="$2"

    : $((total_tests+=1))

    if [[ "$result" == 0 ]]; then
        echo "✔ $test_description"
        : $((passed_tests+=1))
    else
        echo "✖ $test_description"
    fi
}

clean () {
    rm -rf packages/test-pack-*
    rm -f project-tap.i18n
    rm -rf public i18n custom-i18n
    remove_package_js_test_section
    rm -f "$test_run_log_file_path"

    total_tests=0
    passed_tests=0
}

# add_package_js_test_section(test_specific_code, unittest_name1, unittest_name2, ...)
add_package_js_test_section () {
    test_specific="$1"
    shift

    remove_package_js_test_section

    cat <<EOF >> package.js
Package.on_test(function (api) {
  //
  // DO NOT ADD THIS Package.on_test TO GIT!!!
  // DO NOT ADD THIS Package.on_test TO GIT!!!
  // DO NOT ADD THIS Package.on_test TO GIT!!!
  //
  api.use('coffeescript', ['client', 'server']);
  api.use(['tinytest', 'test-helpers', 'templating'], ['client', 'server']);

  api.use(['test-pack-a', 'test-pack-b'], ['client', 'server']);

  $test_specific

  api.add_files('unittest/tests/common.coffee', ['client']);
EOF

    for test_name in "$@"; do
        if [[ "${test_name}" == "${test_name%%-server}" ]]; then
            # Client test
            echo "api.add_files('unittest/tests/$test_name.coffee', ['client']);" >> package.js
        else
            echo "api.add_files('unittest/tests/$test_name.coffee', ['server']);" >> package.js
        fi
    done

    echo "});" >> package.js
}

test_run_log_file_path=".test-run-log"
run_meteor_test () {
    local port=$1
    export TAP_I18N_DIR="$(pwd)/.meteor/local/tap-i18n" 
    export TAP_I18N_DEBUG="true" 
    meteor --port=$1 test-packages ./ | tee "$test_run_log_file_path"
}

########################## TESTS ###########################

test_disabled () {
    local test_name="disabled" test_packages=("a" "b") port=3000

    meteor_unittests_start "$test_name" "tap-i18n is disabled in the project level"

    install_test_packages "${test_packages[@]}"

    add_package_js_test_section "" "$test_name"

    run_meteor_test $port

    meteor_unittests_end
}

test_enabled () {
    local test_name="enabled" test_packages=("a" "b") port=3000

    meteor_unittests_start "$test_name" "tap-i18n is enabled in the project level - no project-tap.i18n"

    install_test_packages "${test_packages[@]}"

    package_js_on_test="$(cat <<EOF
    api.use('tap-i18n', ['client', 'server']);
EOF
    )"

    add_package_js_test_section "$package_js_on_test" "$test_name" "enabled_default_configuration"

    TAP_I18N="enabled" run_meteor_test $port

    meteor_unittests_end
}

common_enabled_bash_tests () {
    [ ! -f "${default_unified_langs_dir}/${fallback_lang}.tap-i18n.json" ]
    record_test_result $? "Unified language file for the fallback language shouldn't be created"
}

test_enabled_custom_supported_languages () {
    local test_name="enabled_custom_supported_languages" test_packages=("a" "b") port=3000

    meteor_unittests_start "$test_name" "tap-i18n is enabled in the project level custom supported language is set on project-tap.i18n"

    install_test_packages "${test_packages[@]}"

    echo '{"supported_languages": ["bb", "cc-CC", "xx-XX"]}' > project-tap.i18n

    package_js_on_test="$(cat <<EOF
    api.use('tap-i18n', ['client', 'server']);

    api.add_files('project-tap.i18n', ['client', 'server']);
EOF
    )"

    # Note that we only use the enabled unittest since the customisations only
    # affect the build process.
    add_package_js_test_section "$package_js_on_test" "enabled" "$test_name"

    TAP_I18N="enabled" run_meteor_test $port

    meteor_unittests_end

    bash_unittests_start "$test_name"

    common_enabled_bash_tests

    supported_languages=("bb" "cc" "xx" "cc-CC" "xx-XX")
    for lang in ${supported_languages[@]}; do
        [ -f "${default_unified_langs_dir}/${lang}.json" ]
        record_test_result $? "Unified language file for supported language ${lang} created"
    done

    (( $( ls ${default_unified_langs_dir} | wc -l ) == ${#supported_languages[@]} ))
    record_test_result $? "Only supported languages unified languages files built"

    bash_unittests_end
}

test_enabled_custom_build_files_path () {
    local test_name="enabled_custom_build_files_path" test_packages=("a" "b") port=3000

    meteor_unittests_start "$test_name" "tap-i18n is enabled in the project level custom build files path is set on project-tap.i18n"

    install_test_packages "${test_packages[@]}"

    echo '{"build_files_path": "public/x", "browser_path": "/x"}' > project-tap.i18n

    package_js_on_test="$(cat <<EOF
    api.use('tap-i18n', ['client', 'server']);

    api.use('http-methods', ['client', 'server']);

    api.add_files('project-tap.i18n', ['client', 'server']);
EOF
    )"

    add_package_js_test_section "$package_js_on_test" "enabled" "$test_name-server" "$test_name"

    TAP_I18N="enabled" run_meteor_test $port

    meteor_unittests_end
}

test_enabled_project_level_translations () {
    local test_name="enabled_project_level_translations" test_packages=("a" "b") port=3000

    meteor_unittests_start "$test_name" "tap-i18n is enabled in the project level - project level translations"

    mkdir i18n
    cp -r unittest/utils/test-lang-files/{en,cc,cc-CC}.i18n.json i18n

    install_test_packages "${test_packages[@]}"

    package_js_on_test="$(cat <<EOF
    api.use('tap-i18n', ['client', 'server']);

    api.add_files('unittest/utils/project-templates/basic.html', ['client']);

    api.add_files([
      'i18n/en.i18n.json',
      'i18n/cc.i18n.json',
      'i18n/cc-CC.i18n.json'
    ], ['client']);
EOF
    )"

    add_package_js_test_section "$package_js_on_test" "enabled" "$test_name"

    TAP_I18N="enabled" run_meteor_test $port

    meteor_unittests_end
}

test_enabled_project_level_translations_custom_translations_dir () {
    local test_name="enabled_project_level_translations_custom_translations_dir" test_packages=("a" "b") port=3000

    meteor_unittests_start "$test_name" "tap-i18n is enabled in the project level - project level translations in a custom translation dir"

    mkdir custom-i18n
    cp -r unittest/utils/test-lang-files/{en,cc,cc-CC}.i18n.json custom-i18n

    install_test_packages "${test_packages[@]}"

    echo '{"languages_files_dir": "custom-i18n"}' > project-tap.i18n

    package_js_on_test="$(cat <<EOF
    api.use('tap-i18n', ['client', 'server']);

    api.add_files('unittest/utils/project-templates/basic.html', ['client']);

    api.add_files('project-tap.i18n', ['client', 'server']);

    api.add_files([
      'custom-i18n/en.i18n.json',
      'custom-i18n/cc.i18n.json',
      'custom-i18n/cc-CC.i18n.json'
    ], ['client']);
EOF
    )"

    add_package_js_test_section "$package_js_on_test" "enabled" "enabled_project_level_translations" "$test_name"

    TAP_I18N="enabled" run_meteor_test $port

    meteor_unittests_end
}

test_package_with_no_fallback_language () {
    local test_name="package_with_no_fallback_language" test_packages=("a" "b" "no_fallback_lang") port=3000

    meteor_unittests_start "$test_name" "tap-i18n package has no translation for the fallback language. Break (ctrl+c) after Meteor build fails to run bash tests."

    install_test_packages "${test_packages[@]}"

    add_package_js_test_section ""

    TAP_I18N="enabled" run_meteor_test $port

    meteor_unittests_end

    bash_unittests_start "$test_name"

    (( $( cat "$test_run_log_file_path" | grep "test-pack-no_fallback_lang has no language file for the fallback language" | wc -l ) > 0 ))
    record_test_result $? "Error thrown"

    bash_unittests_end
}

test_package_with_no_base_lang_for_dialect () {
    local test_name="package_with_no_base_lang_for_dialect" test_packages=("a" "b" "no_base_lang_for_dialect") port=3000

    meteor_unittests_start "$test_name" "tap-i18n package has a translation to a dialect but not to its base language. Break (ctrl+c) after Meteor build fails to run bash tests."

    install_test_packages "${test_packages[@]}"

    add_package_js_test_section ""

    TAP_I18N="enabled" run_meteor_test $port

    meteor_unittests_end

    bash_unittests_start "$test_name"

    (( $( cat "$test_run_log_file_path" | grep "test-pack-no_base_lang_for_dialect has no language file for the base language" | wc -l ) > 0 ))
    record_test_result $? "Error thrown"

    bash_unittests_end
}

########################## MAIN ###########################

if [[ $test_name == "all" ]]; then
    test_disabled
    test_enabled
    test_enabled_custom_supported_languages
    test_enabled_custom_build_files_path
    test_enabled_project_level_translations
    test_enabled_project_level_translations_custom_translations_dir
    test_package_with_no_fallback_language
    test_package_with_no_base_lang_for_dialect
else
    test_"$test_name"
fi

clean
